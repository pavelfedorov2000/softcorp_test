"use strict";

const app = {
  pathToLibsFiles: './assets/libs'
};
window.app = app;

// polyfills
// before polyfills
(function (arr) {
  arr.forEach(item => {
    if (item.hasOwnProperty('before')) {
      return;
    }
    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        // eslint-disable-next-line prefer-rest-params
        const argArr = Array.prototype.slice.call(arguments);
        const docFrag = document.createDocumentFragment();
        argArr.forEach(argItem => {
          const isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

// forEach polyfill
if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    // eslint-disable-next-line no-param-reassign
    thisArg = thisArg || window;
    for (let i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}
app.menu = {
  name: 'menu',
  description: 'burger-btn and burger-menu logic',
  init() {
    const body = document.querySelector('body');
    const burgerBtn = document.querySelector('.burger-btn');
    const menu = document.querySelector('.header__menu');
    const menuClose = document.querySelector('.js-close-menu');
    if (!burgerBtn || !menu) return;
    burgerBtn.addEventListener('click', () => {
      body.classList.add('_lock');
      burgerBtn.classList.add('active');
      menu.classList.add('active');
    });
    if (!menuClose) return;
    menuClose.addEventListener('click', () => {
      body.classList.remove('_lock');
      burgerBtn.classList.remove('active');
      menu.classList.remove('active');
    });
  }
};
app.rangeSlider = {
  name: 'rangeSlider',
  description: 'your script description',
  init() {
    const rangeSlider = document.getElementById('range-slider');
    if (!rangeSlider) return;
    noUiSlider.create(rangeSlider, {
      start: [75],
      range: {
        'min': [0],
        'max': [100]
      }
    });
    rangeSlider.noUiSlider.on('update', function (values, handle) {
      const rangeValue = rangeSlider.closest('.range').querySelector('.range__value');
      if (!rangeValue) return;
      rangeValue.innerHTML = `${Math.floor(values[handle])}%`;
    });
  }
};
app.select = {
  name: 'select',
  description: 'your script description',
  init() {
    const selects = document.querySelectorAll('.select');
    if (!selects.length) return;
    selects.forEach(select => {
      const selectToggle = select.querySelector('.select__toggle');
      const selectToggleText = selectToggle.querySelector('.select__toggle-text');
      const selectLabels = select.querySelectorAll('.select__label');
      selectToggle.addEventListener('click', () => {
        if ('active' === select.getAttribute('data-state')) {
          select.setAttribute('data-state', '');
          selectToggle.setAttribute('aria-expanded', false);
        } else {
          select.setAttribute('data-state', 'active');
          selectToggle.setAttribute('aria-expanded', true);
        }
      });
      selectLabels.forEach(label => {
        label.addEventListener('click', e => {
          selectToggleText.textContent = e.target.textContent;
          select.setAttribute('data-state', '');
          selectToggle.setAttribute('aria-expanded', false);
        });
      });
    });
    document.addEventListener('mouseup', e => {
      if (!e.target.classList.contains('select__toggle') && !e.target.classList.contains('select__toggle-text') && !e.target.classList.contains('select__toggle-arrow')) {
        const activeSelect = document.querySelector('[data-state="active"]');
        if (!activeSelect) return;
        const activeSelectToggle = activeSelect.querySelector('.select__toggle');
        activeSelect.setAttribute('data-state', '');
        activeSelectToggle.setAttribute('aria-expanded', false);
      }
    });
  }
};
app.addLibs = {
  name: 'addLibs',
  description: 'connect the script library dynamically',
  addScriptFile(nameFile, callback) {
    const body = document.getElementsByTagName('body')[0];
    const script = document.createElement('script');
    script.onload = () => callback && callback();
    script.src = `${app.pathToLibsFiles}/js/${nameFile}.js`;
    body.appendChild(script);
  },
  addStyleFile(nameFile) {
    const appCss = document.getElementById('app-css');
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = `${app.pathToLibsFiles}/css/${nameFile}.css`;
    appCss.before(link);
  },
  initScript(nameFile, nameLib, callback) {
    let hasLibs = null;
    const scripts = document.querySelectorAll('script');
    scripts.forEach(el => {
      const str = el.getAttribute('src');
      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });
    if (!hasLibs) {
      this.addScriptFile(nameFile, callback);
    } else {
      const timerId = setInterval(() => {
        if (window[nameLib] || window.jQuery && jQuery()[nameLib]) {
          callback();
          clearInterval(timerId);
        }
      }, 1);
    }
  },
  initStyle(nameFile) {
    let hasLibs = null;
    const link = document.querySelectorAll('link');
    link.forEach(el => {
      const str = el.getAttribute('src');
      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });
    if (!hasLibs) {
      this.addStyleFile(nameFile);
    }
  }
};
document.addEventListener('DOMContentLoaded', () => {
  app.menu.init();
  app.select.init();
  app.rangeSlider.init();
  const scrollBtns = document.querySelectorAll('[data-section]');
  if (!scrollBtns.length) return;
  scrollBtns.forEach(link => {
    link.addEventListener('click', event => {
      event.preventDefault();
      window.scrollTo({
        top: document.querySelector(`#${link.getAttribute('data-section')}`).offsetTop,
        behavior: "smooth"
      });
      const menu = link.closest('.header__menu');
      if (!menu || !menu.classList.contains('active')) return;
      document.querySelector('body').classList.remove('_lock');
      menu.classList.remove('active');
    });
  });
  const fileInputs = document.querySelectorAll('input[type="file"]');
  if (!fileInputs.length) return;
  fileInputs.forEach(input => {
    input.addEventListener('change', function () {
      const label = input.closest('label').querySelector('.btn__text');
      const fileName = this.files[0].name;
      label.textContent = fileName;
    });
  });
  const animatedItems = document.querySelectorAll('.animated');
  if (!animatedItems.length) return;
  const callback = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('in-view');
        observer.unobserve(entry.target);
      } else {
        entry.target.classList.remove('in-view');
      }
    });
  };
  const options = {
    rootMargin: '0px 0px 75px 0px',
    threshold: 0
  };
  const observer = new IntersectionObserver(callback, options);
  animatedItems.forEach(item => observer.observe(item));
});
//# sourceMappingURL=app.min.js.map
